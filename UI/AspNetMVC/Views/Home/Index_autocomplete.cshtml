@{
    ViewData["Title"] = "Ana Sayfa";
}

<div ng-controller="BasicAutocomplete as ctrl" class="md-padding" id="popupContainer" ng-cloak>
    <section class="demo-container">
        <md-toolbar class="demo-toolbar">
            <div class="md-toolbar-tools">
                <h3>Basit Otomatik Tamamlama</h3>
            </div>
        </md-toolbar>
        <div class="md-whiteframe-z1 docs-list">
            <md-content class="md-padding">
                <form ng-submit="$event.preventDefault()">
                    <p>Use <code>md-autocomplete</code> to search for matches from local or remote data sources.</p>
                    <md-autocomplete ng-disabled="ctrl.isDisabled"
                                     md-no-cache="ctrl.noCache"
                                     md-selected-item="ctrl.selectedItem"
                                     md-search-text-change="ctrl.searchTextChange(ctrl.searchText)"
                                     md-search-text="ctrl.searchText"
                                     md-selected-item-change="ctrl.selectedItemChange(item)"
                                     md-items="item in ctrl.querySearch(ctrl.searchText)"
                                     md-item-text="item.display"
                                     md-min-length="0"
                                     placeholder="What is your favorite US state?">
                        <md-item-template>
                            <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span>
                        </md-item-template>
                        <md-not-found>
                            No states matching "{{ctrl.searchText}}" were found.
                            <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a>
                        </md-not-found>
                    </md-autocomplete>
                    <br />
                    <md-checkbox ng-model="ctrl.simulateQuery">Simulate query for results?</md-checkbox>
                    <md-checkbox ng-model="ctrl.noCache">Disable caching of queries?</md-checkbox>
                    <md-checkbox ng-model="ctrl.isDisabled">Disable the input?</md-checkbox>
                    <p>By default, <code>md-autocomplete</code> will cache results when performing a query.  After the initial call is performed, it will use the cached results to eliminate unnecessary server requests or lookup logic. This can be disabled above.</p>
                </form>
            </md-content>
        </div>
    </section>
</div>
<section class="demo-container">
    <md-toolbar class="demo-toolbar">
        <div class="md-toolbar-tools">
            <h3>Özelleştirilmiş Otomatik Tamamlama</h3>
        </div>
    </md-toolbar>
    <div class="md-whiteframe-z1 docs-list">
        <div ng-controller="CustomAutocomplete as ctrl" layout="column" ng-cloak>
            <md-content layout-padding layout="column">
                <form ng-submit="$event.preventDefault()">
                    <p>Use <code>&lt;md-autocomplete&gt;</code> with custom templates to show styled autocomplete results.</p>
                    <md-autocomplete ng-disabled="ctrl.isDisabled"
                                     md-no-cache="ctrl.noCache"
                                     md-selected-item="ctrl.selectedItem"
                                     md-search-text-change="ctrl.searchTextChange(ctrl.searchText)"
                                     md-search-text="ctrl.searchText"
                                     md-selected-item-change="ctrl.selectedItemChange(item)"
                                     md-items="item in ctrl.querySearch(ctrl.searchText)"
                                     md-item-text="item.name"
                                     md-min-length="0"
                                     placeholder="Pick an Angular repository"
                                     md-menu-class="autocomplete-custom-template">
                        <md-item-template>
                            <span class="item-title"> <md-icon md-svg-icon="/img/icons/octicon-repo.svg"></md-icon> <span> {{item.name}} </span> </span>
                            <span class="item-metadata">
                                <span class="item-metastat"> <strong>{{item.watchers}}</strong> watchers </span>
                                <span class="item-metastat"> <strong>{{item.forks}}</strong> forks </span>
                            </span>
                        </md-item-template>
                    </md-autocomplete>
                </form>
            </md-content>
        </div>
    </div>
</section>



<section class="demo-container">
    <md-toolbar class="demo-toolbar">
        <div class="md-toolbar-tools">
            <h3>Floating Label</h3>
        </div>
    </md-toolbar>
    <div class="md-whiteframe-z1 docs-list">
        <div ng-controller="FloatingLabelCtrl as ctrl" layout="column" ng-cloak>
            <md-content class="md-padding">
                <form ng-submit="$event.preventDefault()" name="searchForm">
                    <p>The following example demonstrates floating labels being used as a normal form element.</p>
                    <div layout-gt-sm="row">
                        <md-input-container flex>
                            <label>Name</label>
                            <input type="text" />
                        </md-input-container>
                        <md-autocomplete flex required
                                         md-input-name="autocompleteField"
                                         md-input-minlength="2"
                                         md-input-maxlength="18"
                                         md-no-cache="ctrl.noCache"
                                         md-selected-item="ctrl.selectedItem"
                                         md-search-text="ctrl.searchText"
                                         md-items="item in ctrl.querySearch(ctrl.searchText)"
                                         md-item-text="item.display"
                                         md-floating-label="Favorite state">
                            <md-item-template>
                                <span md-highlight-text="ctrl.searchText">{{item.display}}</span>
                            </md-item-template>
                            <div ng-messages="searchForm.autocompleteField.$error" ng-if="searchForm.autocompleteField.$touched">
                                <div ng-message="required">You <b>must</b> have a favorite state.</div>
                                <div ng-message="minlength">Your entry is not long enough.</div>
                                <div ng-message="maxlength">Your entry is too long.</div>
                            </div>
                        </md-autocomplete>
                    </div>
                </form>
            </md-content>
        </div>
    </div>
</section>


<section class="demo-container">
    <md-toolbar class="demo-toolbar">
        <div class="md-toolbar-tools">
            <h3>Floating Label</h3>
        </div>
    </md-toolbar>
    <div class="md-whiteframe-z1 docs-list">
        <div ng-controller="InsideDialogCtrl as ctrl" layout="column" ng-cloak>
            <md-content class="md-padding">
                <p>
                    Click the button below to open the dialog with an autocomplete.
                </p>
                <md-button ng-click="ctrl.openDialog($event)" class="md-raised">Open Dialog</md-button>
            </md-content>
        </div>
    </div>
</section>




@section scripts{
    <script>
        (function () {
            'use strict';
            CrmApp
                .controller('BasicAutocomplete', BasicAutocomplete)
                .controller('CustomAutocomplete', CustomAutocomplete)
                .controller('FloatingLabelCtrl', FloatingLabelCtrl)
            .controller('InsideDialogCtrl', InsideDialogCtrl);
            //InsideDialogCtrl
            function InsideDialogCtrl($mdDialog) {
                var self = this;
                self.openDialog = function ($event) {
                    $mdDialog.show({
                        controller: DialogCtrl,
                        controllerAs: 'ctrl',
                        templateUrl: '/tmpl/dialog/dialog.tmpl.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        clickOutsideToClose: true
                    })
                }
            };

            function DialogCtrl($timeout, $q, $scope, $mdDialog) {
                var self = this;
                // list of `state` value/display objects
                self.states = loadAll();
                self.querySearch = querySearch;
                // ******************************
                // Template methods
                // ******************************
                self.cancel = function ($event) {
                    $mdDialog.cancel();
                };
                self.finish = function ($event) {
                    $mdDialog.hide();
                };
                // ******************************
                // Internal methods
                // ******************************
                /**
                 * Search for states... use $timeout to simulate
                 * remote dataservice call.
                 */
                function querySearch(query) {
                    return query ? self.states.filter(createFilterFor(query)) : self.states;
                }
                /**
                 * Build `states` list of key/value pairs
                 */
                function loadAll() {
                    var allStates = 'Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware,\
              Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana,\
              Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\
              Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina,\
              North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,\
              South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia,\
              Wisconsin, Wyoming';
                    return allStates.split(/, +/g).map(function (state) {
                        return {
                            value: state.toLowerCase(),
                            display: state
                        };
                    });
                }
                /**
                 * Create filter function for a query string
                 */
                function createFilterFor(query) {
                    var lowercaseQuery = angular.lowercase(query);
                    return function filterFn(state) {
                        return (state.value.indexOf(lowercaseQuery) === 0);
                    };
                }
            }

            // FloatingLabel
            function FloatingLabelCtrl($timeout, $q, $log) {
                var self = this;
                // list of `state` value/display objects
                self.states = loadAll();
                self.selectedItem = null;
                self.searchText = null;
                self.querySearch = querySearch;
                // ******************************
                // Internal methods
                // ******************************
                /**
                 * Search for states... use $timeout to simulate
                 * remote dataservice call.
                 */
                function querySearch(query) {
                    var results = query ? self.states.filter(createFilterFor(query)) : [];
                    return results;
                }
                /**
                 * Build `states` list of key/value pairs
                 */
                function loadAll() {
                    var allStates = 'Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware,\
              Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana,\
              Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\
              Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina,\
              North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,\
              South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia,\
              Wisconsin, Wyoming';
                    return allStates.split(/, +/g).map(function (state) {
                        return {
                            value: state.toLowerCase(),
                            display: state
                        };
                    });
                }
                /**
                 * Create filter function for a query string
                 */
                function createFilterFor(query) {
                    var lowercaseQuery = angular.lowercase(query);
                    return function filterFn(state) {
                        return (state.value.indexOf(lowercaseQuery) === 0);
                    };
                }
            };
            // BasicAutocomplete
            function BasicAutocomplete($timeout, $q, $log) {
                var self = this;
                self.simulateQuery = false;
                self.isDisabled = false;
                // list of `state` value/display objects
                self.states = loadAll();
                self.querySearch = querySearch;
                self.selectedItemChange = selectedItemChange;
                self.searchTextChange = searchTextChange;
                self.newState = newState;
                function newState(state) {
                    alert("Sorry! You'll need to create a Constituion for " + state + " first!");
                }
                // ******************************
                // Internal methods
                // ******************************
                /**
                 * Search for states... use $timeout to simulate
                 * remote dataservice call.
                 */
                function querySearch(query) {
                    var results = query ? self.states.filter(createFilterFor(query)) : self.states,
                        deferred;
                    if (self.simulateQuery) {
                        deferred = $q.defer();
                        $timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
                        return deferred.promise;
                    } else {
                        return results;
                    }
                }
                function searchTextChange(text) {
                    $log.info('Text changed to ' + text);
                }
                function selectedItemChange(item) {
                    $log.info('Item changed to ' + JSON.stringify(item));
                }
                /**
                 * Build `states` list of key/value pairs
                 */
                function loadAll() {
                    var allStates = 'Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware,\
              Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana,\
              Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\
              Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina,\
              North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,\
              South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia,\
              Wisconsin, Wyoming';
                    return allStates.split(/, +/g).map(function (state) {
                        return {
                            value: state.toLowerCase(),
                            display: state
                        };
                    });
                }
                /**
                 * Create filter function for a query string
                 */
                function createFilterFor(query) {
                    var lowercaseQuery = angular.lowercase(query);
                    return function filterFn(state) {
                        return (state.value.indexOf(lowercaseQuery) === 0);
                    };
                }
            }




            // CustomAutocomplete
            function CustomAutocomplete($timeout, $q, $log) {
                var self = this;
                self.simulateQuery = false;
                self.isDisabled = false;
                self.repos = loadAll();
                self.querySearch = querySearch;
                self.selectedItemChange = selectedItemChange;
                self.searchTextChange = searchTextChange;
                // ******************************
                // Internal methods
                // ******************************
                /**
                 * Search for repos... use $timeout to simulate
                 * remote dataservice call.
                 */
                function querySearch(query) {
                    var results = query ? self.repos.filter(createFilterFor(query)) : self.repos,
                        deferred;
                    if (self.simulateQuery) {
                        deferred = $q.defer();
                        $timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
                        return deferred.promise;
                    } else {
                        return results;
                    }
                }
                function searchTextChange(text) {
                    $log.info('Text changed to ' + text);
                }
                function selectedItemChange(item) {
                    $log.info('Item changed to ' + JSON.stringify(item));
                }
                /**
                 * Build `components` list of key/value pairs
                 */
                function loadAll() {
                    var repos = [
                      {
                          'name': 'Angular 1',
                          'url': 'https://github.com/angular/angular.js',
                          'watchers': '3,623',
                          'forks': '16,175',
                      },
                      {
                          'name': 'Angular 2',
                          'url': 'https://github.com/angular/angular',
                          'watchers': '469',
                          'forks': '760',
                      },
                      {
                          'name': 'Angular Material',
                          'url': 'https://github.com/angular/material',
                          'watchers': '727',
                          'forks': '1,241',
                      },
                      {
                          'name': 'Bower Material',
                          'url': 'https://github.com/angular/bower-material',
                          'watchers': '42',
                          'forks': '84',
                      },
                      {
                          'name': 'Material Start',
                          'url': 'https://github.com/angular/material-start',
                          'watchers': '81',
                          'forks': '303',
                      }
                    ];
                    return repos.map(function (repo) {
                        repo.value = repo.name.toLowerCase();
                        return repo;
                    });
                }
                /**
                 * Create filter function for a query string
                 */
                function createFilterFor(query) {
                    var lowercaseQuery = angular.lowercase(query);
                    return function filterFn(item) {
                        return (item.value.indexOf(lowercaseQuery) === 0);
                    };
                }
            }
        })();
    </script>
}
